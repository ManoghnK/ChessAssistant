peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <- peopleBirthDeathData$DeathYear - peopleBirthDeathData$BirthYear
peopleBirthDeathData
female <- grepl("f", peopleBirthDeathData$Gender)
male <- grepl("m", peopleBirthDeathData$Gender)
male
peopleBirthDeathData[male]$Gender <- "male"
peopleBirthDeathData
female
peopleBirthDeathData[female]$Gender <- "female"
peopleBirthDeathData
peopleBirthDeathData[!female & !male]$Gender <- NA
peopleBirthDeathData
knitr::opts_chunk$set(echo = TRUE)
txt <- readLines("PeopleBirthDeathData.txt")
T <- grepl("^%", txt)
txt <- txt[!T]
txt
txtData <- strsplit(txt, split = ",")
assignFields <- function(x) {
out <- character(4)
i <- grepl("[[:alpha:]]", x) # Names
out[1] <- x[i]
i <- which(as.numeric(x) < 1890) # Birth Year
out[2] <- ifelse(length(i)>0, x[i], NA)
i <- which(as.numeric(x) > 1890) # Death Year
out[3] <- ifelse(length(i)>0, x[i], NA)
i <- grepl("fem|male", x) # Gender
out[4] <- x[i]
out
}
txtCleanData <- lapply(txtData, assignFields)
M <- matrix(
unlist(txtCleanData),
nrow=length(txtCleanData),
byrow=TRUE
)
colnames(M) <- c("Name","BirthYear","DeathYear", "Gender")
peopleBirthDeathData = as.data.frame(M, stringsAsFactors=FALSE)
peopleBirthDeathData
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <- peopleBirthDeathData$DeathYear - peopleBirthDeathData$BirthYear
peopleBirthDeathData
peopleBirthDeathData[male]$Gender <- "male"
peopleBirthDeathData
female
peopleBirthDeathData[female]$Gender <- "female"
peopleBirthDeathData
list(peopleBirthDeathData$Gender, female)
peopleBirthDeathData[female]$Gender
peopleBirthDeathData[female]
female
peopleBirthDeathData[1892]
peopleBirthDeathData$Gender[female]
knitr::opts_chunk$set(echo = TRUE)
txt <- readLines("PeopleBirthDeathData.txt")
T <- grepl("^%", txt)
txt <- txt[!T]
txt
txtData <- strsplit(txt, split = ",")
assignFields <- function(x) {
out <- character(4)
i <- grepl("[[:alpha:]]", x) # Names
out[1] <- x[i]
i <- which(as.numeric(x) < 1890) # Birth Year
out[2] <- ifelse(length(i)>0, x[i], NA)
i <- which(as.numeric(x) > 1890) # Death Year
out[3] <- ifelse(length(i)>0, x[i], NA)
i <- grepl("fem|male", x) # Gender
out[4] <- x[i]
out
}
txtCleanData <- lapply(txtData, assignFields)
M <- matrix(
unlist(txtCleanData),
nrow=length(txtCleanData),
byrow=TRUE
)
colnames(M) <- c("Name","BirthYear","DeathYear", "Gender")
peopleBirthDeathData = as.data.frame(M, stringsAsFactors=FALSE)
peopleBirthDeathData
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <- peopleBirthDeathData$DeathYear - peopleBirthDeathData$BirthYear
peopleBirthDeathData
female <- grepl("f", peopleBirthDeathData$Gender)
male <- grepl("m", peopleBirthDeathData$Gender)
male
peopleBirthDeathData$Gender[male] <- "male"
peopleBirthDeathData
female
peopleBirthDeathData$Gender[female] <- "female"
peopleBirthDeathData
peopleBirthDeathData[!female & !male]$Gender <- NA
peopleBirthDeathData
knitr::opts_chunk$set(echo = TRUE)
txt <- readLines("PeopleBirthDeathData.txt")
T <- grepl("^%", txt)
txt <- txt[!T]
txt
txtData <- strsplit(txt, split = ",")
assignFields <- function(x) {
out <- character(4)
i <- grepl("[[:alpha:]]", x) # Names
out[1] <- x[i]
i <- which(as.numeric(x) < 1890) # Birth Year
out[2] <- ifelse(length(i)>0, x[i], NA)
i <- which(as.numeric(x) > 1890) # Death Year
out[3] <- ifelse(length(i)>0, x[i], NA)
i <- grepl("fem|male", x) # Gender
out[4] <- x[i]
out
}
txtCleanData <- lapply(txtData, assignFields)
M <- matrix(
unlist(txtCleanData),
nrow=length(txtCleanData),
byrow=TRUE
)
colnames(M) <- c("Name","BirthYear","DeathYear", "Gender")
peopleBirthDeathData = as.data.frame(M, stringsAsFactors=FALSE)
peopleBirthDeathData
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <- peopleBirthDeathData$DeathYear - peopleBirthDeathData$BirthYear
peopleBirthDeathData
female <- grepl("f", peopleBirthDeathData$Gender)
male <- grepl("m", peopleBirthDeathData$Gender)
peopleBirthDeathData$Gender <- NA
peopleBirthDeathData$Gender[male] <- "male"
peopleBirthDeathData$Gender[female] <- "female"
peopleBirthDeathData
knitr::opts_chunk$set(echo = TRUE)
txt <- readLines("PeopleBirthDeathData.txt")
T <- grepl("^%", txt)
txt <- txt[!T]
txt
txtData <- strsplit(txt, split = ",")
assignFields <- function(x) {
out <- character(4)
i <- grepl("[[:alpha:]]", x) # Names
out[1] <- x[i]
i <- which(as.numeric(x) < 1890) # Birth Year
out[2] <- ifelse(length(i)>0, x[i], NA)
i <- which(as.numeric(x) > 1890) # Death Year
out[3] <- ifelse(length(i)>0, x[i], NA)
i <- grepl("fem|male", x) # Gender
out[4] <- x[i]
out
}
txtCleanData <- lapply(txtData, assignFields)
M <- matrix(
unlist(txtCleanData),
nrow=length(txtCleanData),
byrow=TRUE
)
colnames(M) <- c("Name","BirthYear","DeathYear", "Gender")
peopleBirthDeathData = as.data.frame(M, stringsAsFactors=FALSE)
peopleBirthDeathData
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <- peopleBirthDeathData$DeathYear - peopleBirthDeathData$BirthYear
peopleBirthDeathData
female <- grepl("f", peopleBirthDeathData$Gender)
male <- grepl("m", peopleBirthDeathData$Gender)
peopleBirthDeathData$Gender <- NA
peopleBirthDeathData$Gender[male] <- "male"
peopleBirthDeathData$Gender[female] <- "female"
peopleBirthDeathData$Gender <- as.factor(peopleBirthDeathData$Gender)
peopleBirthDeathData
txt <- readLines("PeopleBirthDeathData.txt")
T <- grepl("^%", txt)
txt <- txt[!T]
txt
txtData <- strsplit(txt, split = ",")
assignFields <- function(x) {
out <- character(1)
i <- grepl("[[:alpha:]]", x) # Names
out[1] <- x[i]
i <- which(as.numeric(x) < 1890) # Birth Year
out[2] <- ifelse(length(i)>0, x[i], NA)
i <- which(as.numeric(x) > 1890) # Death Year
out[3] <- ifelse(length(i)>0, x[i], NA)
i <- grepl("fem|male", x) # Gender
out[4] <- x[i]
out
}
txtCleanData <- lapply(txtData, assignFields)
M <- matrix(
unlist(txtCleanData),
nrow=length(txtCleanData),
byrow=TRUE
)
colnames(M) <- c("Name","BirthYear","DeathYear", "Gender")
peopleBirthDeathData = as.data.frame(M, stringsAsFactors=FALSE)
peopleBirthDeathData
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
knitr::opts_chunk$set(echo = TRUE)
txt <- readLines("PeopleBirthDeathData.txt")
txt
commentLines <- grepl("^%", txt)
txt <- txt[!commentLines]
txt
txtData <- strsplit(txt, split = ",")
assignFields <- function(x) {
out <- character(4)
i <- grepl("[[:alpha:]]", x) # Names
out[1] <- x[i]
i <- which(as.numeric(x) < 1890) # Birth Year
out[2] <- ifelse(length(i)>0, x[i], NA)
i <- which(as.numeric(x) > 1890) # Death Year
out[3] <- ifelse(length(i)>0, x[i], NA)
i <- grepl("fem|male", x) # Gender
out[4] <- x[i]
out
}
txtCleanData <- lapply(txtData, assignFields)
M <- matrix(
unlist(txtCleanData),
nrow=length(txtCleanData),
byrow=TRUE
)
colnames(M) <- c("Name","BirthYear","DeathYear", "Gender")
peopleBirthDeathData = as.data.frame(M, stringsAsFactors=FALSE)
peopleBirthDeathData
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <-
peopleBirthDeathData$DeathYear - peopleBirthDeathData$BirthYear
peopleBirthDeathData
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <- peopleBirthDeathData$DeathYear -
peopleBirthDeathData$BirthYear
peopleBirthDeathData
knitr::opts_chunk$set(echo = TRUE)
txt <- readLines("PeopleBirthDeathData.txt")
txt
commentLines <- grepl("^%", txt)
txt <- txt[!commentLines]
txt
txtData <- strsplit(txt, split = ",")
assignFields <- function(x) {
out <- character(4)
i <- grepl("[[:alpha:]]", x) # Names
out[1] <- x[i]
i <- which(as.numeric(x) < 1890) # Birth Year
out[2] <- ifelse(length(i)>0, x[i], NA)
i <- which(as.numeric(x) > 1890) # Death Year
out[3] <- ifelse(length(i)>0, x[i], NA)
i <- grepl("fem|male", x) # Gender
out[4] <- x[i]
out
}
txtCleanData <- lapply(txtData, assignFields)
M <- matrix(
unlist(txtCleanData),
nrow=length(txtCleanData),
byrow=TRUE
)
colnames(M) <- c("Name","BirthYear","DeathYear", "Gender")
peopleBirthDeathData = as.data.frame(M, stringsAsFactors=FALSE)
peopleBirthDeathData
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <- peopleBirthDeathData$DeathYear -
peopleBirthDeathData$BirthYear
peopleBirthDeathData
txt <- readLines("PeopleBirthDeathData.txt")
txt
commentLines <- grepl("^%", txt)
txt <- txt[!commentLines]
txt
txtData <- strsplit(txt, split = ",")
assignFields <- function(x) {
out <- character(4)
i <- grepl("[[:alpha:]]", x) # Names
out[1] <- x[i]
i <- which(as.numeric(x) < 1890) # Birth Year
out[2] <- ifelse(length(i)>0, x[i], NA)
i <- which(as.numeric(x) > 1890) # Death Year
out[3] <- ifelse(length(i)>0, x[i], NA)
i <- grepl("fe|ma", x) # Gender
out[4] <- x[i]
out
}
txtCleanData <- lapply(txtData, assignFields)
M <- matrix(
unlist(txtCleanData),
nrow=length(txtCleanData),
byrow=TRUE
)
colnames(M) <- c("Name","BirthYear","DeathYear", "Gender")
peopleBirthDeathData = as.data.frame(M, stringsAsFactors=FALSE)
peopleBirthDeathData
txt <- readLines("PeopleBirthDeathData.txt")
txt
commentLines <- grepl("^%", txt)
txt <- txt[!commentLines]
txt
txtData <- strsplit(txt, split = ",")
assignFields <- function(x) {
record <- character(4)
cell <- grepl("[[:alpha:]]", x) # Names
record[1] <- x[cell]
cell <- which(as.numeric(x) < 1890) # Birth Year
record[2] <- ifelse(length(cell)>0, x[cell], NA)
cell <- which(as.numeric(x) > 1890) # Death Year
record[3] <- ifelse(length(cell)>0, x[cell], NA)
cell <- grepl("fem|male", x) # Gender
record[4] <- x[cell]
record
}
txtCleanData <- lapply(txtData, assignFields)
M <- matrix(
unlist(txtCleanData),
nrow=length(txtCleanData),
byrow=TRUE
)
colnames(M) <- c("Name","BirthYear","DeathYear", "Gender")
peopleBirthDeathData = as.data.frame(M, stringsAsFactors=FALSE)
peopleBirthDeathData
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <- peopleBirthDeathData$DeathYear -
peopleBirthDeathData$BirthYear
peopleBirthDeathData
female <- grepl("f", peopleBirthDeathData$Gender)
male <- grepl("m", peopleBirthDeathData$Gender)
peopleBirthDeathData$Gender <- NA
peopleBirthDeathData$Gender[male] <- "male"
peopleBirthDeathData$Gender[female] <- "female"
peopleBirthDeathData$Gender <- as.factor(peopleBirthDeathData$Gender)
peopleBirthDeathData
knitr::opts_chunk$set(echo = TRUE)
txt <- readLines("PeopleBirthDeathData.txt")
txt
commentLines <- grepl("^%", txt)
txt <- txt[!commentLines]
txt
txtData <- strsplit(txt, split = ",")
assignFields <- function(x) {
record <- character(4)
cell <- grepl("[[:alpha:]]", x) # Names
record[1] <- x[cell]
cell <- which(as.numeric(x) < 1890) # Birth Year
record[2] <- ifelse(length(cell)>0, x[cell], NA)
cell <- which(as.numeric(x) > 1890) # Death Year
record[3] <- ifelse(length(cell)>0, x[cell], NA)
cell <- grepl("fem|male", x) # Gender
record[4] <- x[cell]
record
}
txtCleanData <- lapply(txtData, assignFields)
txtMatrix <- matrix(
unlist(txtCleanData),
nrow=length(txtCleanData),
byrow=TRUE
)
colnames(txtMatrix) <- c("Name","BirthYear","DeathYear", "Gender")
peopleBirthDeathData = as.data.frame(txtMatrix, stringsAsFactors=FALSE)
peopleBirthDeathData
peopleBirthDeathData$Name <- as.character(peopleBirthDeathData$Name)
peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <- peopleBirthDeathData$DeathYear -
peopleBirthDeathData$BirthYear
peopleBirthDeathData
female <- grepl("f", peopleBirthDeathData$Gender)
male <- grepl("m", peopleBirthDeathData$Gender)
peopleBirthDeathData$Gender <- NA
peopleBirthDeathData$Gender[male] <- "male"
peopleBirthDeathData$Gender[female] <- "female"
peopleBirthDeathData$Gender <- as.factor(peopleBirthDeathData$Gender)
peopleBirthDeathData
df <- read.csv("ChessDataset.csv")
setwd("/Users/Macintosh/Desktop/FDA/Project")
df <- read.csv("ChessDataset.csv")
df
df["Game ID"]
names(df)
df$Game.ID
install.packages("shiny")
library(shiny)
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel("sidebar panel"),
mainPanel("main panel")
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
p("p creates a paragraph of text."),
p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
strong("strong() makes bold text."),
em("em() creates italicized (i.e, emphasized) text."),
br(),
code("code displays your text similar to computer code"),
div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div", style = "color:blue"),
br(),
p("span does the same thing as div, but it works with",
span("groups of words", style = "color:blue"),
"that appear inside a paragraph.")
)
)
)
library(shiny)
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
p("p creates a paragraph of text."),
p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
strong("strong() makes bold text."),
em("em() creates italicized (i.e, emphasized) text."),
br(),
code("code displays your text similar to computer code"),
div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div", style = "color:blue"),
br(),
p("span does the same thing as div, but it works with",
span("groups of words", style = "color:blue"),
"that appear inside a paragraph.")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
img(src = "pictures/chessBoard.png", height = 200, width = 400)
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("My Shiny App"),
mainPanel(
img(src = "pictures/chessBoard.png", height = 400, width = 400)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('game.R')
runApp('game.R')
install.packages("rchess")
\
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
library(shiny); runApp('game.R')
library(shiny); runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
runApp('game.R')
